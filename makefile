# need min Android API 23 (for GNU-style dynamic link lib hashing, whatever that is - rust only outputs libs in this format)
# need to install crates cbindgen, cargo-ndk

.DEFAULT_GOAL := help
PROJECTNAME=$(shell basename "$(PWD)")
SOURCES=$(sort $(wildcard ./src/*.rs ./src/**/*.rs))

OS_NAME=$(shell uname | tr '[:upper:]' '[:lower:]')
PATH := $(ANDROID_NDK_HOME)/toolchains/llvm/prebuilt/$(OS_NAME)-x86_64/bin:$(PATH)

ANDROID_AARCH64_LINKER=$(ANDROID_NDK_HOME)/toolchains/llvm/prebuilt/$(OS_NAME)-x86_64/bin/aarch64-linux-android29-clang
ANDROID_ARMV7_LINKER=$(ANDROID_NDK_HOME)/toolchains/llvm/prebuilt/$(OS_NAME)-x86_64/bin/armv7a-linux-androideabi29-clang
ANDROID_I686_LINKER=$(ANDROID_NDK_HOME)/toolchains/llvm/prebuilt/$(OS_NAME)-x86_64/bin/i686-linux-android29-clang

SHELL := /bin/bash

.PHONY: help
help: makefile
	@echo
	@echo " Available actions in "$(PROJECTNAME)":"
	@echo
	@sed -n 's/^##//p' $< | column -t -s ':' |  sed -e 's/^/ /'
	@echo

# init: Ensure build dependencies are available.
.PHONY: init
init:
	cd native
	@if [ $$(uname) == "Darwin" ] ; then cargo install cargo-lipo ; fi
	cargo install cbindgen
	cargo install cargo-ndk
	cargo install protobuf-codegen
	@if [ $$(uname) == "Darwin" ] ; then \
		rustup target add aarch64-apple-ios x86_64-apple-ios ; \
	fi
	rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android

# clean:
.PHONY: clean
clean:
	rm -rf build
	rm -rf release
	flutter clean
	flutter pub get
	flutter pub upgrade
	cd native ; cargo clean

# all: Compile iOS, Android, and bindings targets, and generate protobuf source files
# for shared messages
all: protos android-debug ios-debug bindings install

all-android: protos android-debug bindings install

all-ios: clean ios-debug bindings target/install-ios-debug target/install-ios-bindings
# TODO: protos doesn't build on macOS, due to differences in the supplied awk I think

# ios: Compile the iOS universal library
ios-debug: #$(SOURCES) ndk-home
	@if [ $$(uname) == "Darwin" ] ; then \
  		cd native ; \
		cargo lipo ; \
		else echo "Skipping iOS compilation on $$(uname)" ; \
	fi

# android: Compile the android targets (arm64, armv7 and i686)
android-debug: aarch64-linux-android-debug armv7-linux-androideabi-debug i686-linux-android-debug

aarch64-linux-android-debug: $(SOURCES) ndk-home
	cd native ; \
	CC_aarch64_linux_android=$(ANDROID_AARCH64_LINKER) \
	CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=$(ANDROID_AARCH64_LINKER) \
		cargo build --target aarch64-linux-android

armv7-linux-androideabi-debug: $(SOURCES) ndk-home
	cd native ; \
	CC_armv7_linux_androideabi=$(ANDROID_ARMV7_LINKER) \
	CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER=$(ANDROID_ARMV7_LINKER) \
		cargo build --target armv7-linux-androideabi

i686-linux-android-debug: $(SOURCES) ndk-home
	cd native ; \
	CC_i686_linux_android=$(ANDROID_I686_LINKER) \
	CARGO_TARGET_I686_LINUX_ANDROID_LINKER=$(ANDROID_I686_LINKER) \
		cargo build --target i686-linux-android

.PHONY: ndk-home
ndk-home:
	@if [ ! -d "${ANDROID_NDK_HOME}" ] ; then \
		echo "Error: Please, set the ANDROID_NDK_HOME env variable to point to your NDK folder" ; \
		exit 1 ; \
	fi

# protos: Generate dart protobuf source files for shared messages
.PHONY: protos
protos: target/dart_protos target/rust_protos

target/dart_protos:
	rm -rf lib/protos
	mkdir lib/protos
	mkdir lib/protos/lib
	mkdir lib/protos/lib/src

	echo "// Auto-generated by makefile. Do not edit by hand." > lib/protos/lib/protos.dart
	echo "library shared_ffi_protos;" >> lib/protos/lib/protos.dart
	echo "import 'package:protobuf/protobuf.dart' as protobuf;" >> lib/protos/lib/protos.dart

	echo "name: shared_ffi_protos" > lib/protos/pubspec.yaml
	echo "description: Auto-generated protobuf messages shared across FFI" >> lib/protos/pubspec.yaml
	echo "version: 1.0.0" >> lib/protos/pubspec.yaml
	echo "environment:" >> lib/protos/pubspec.yaml
	echo "  sdk: '>=2.8.0 <3.0.0'" >> lib/protos/pubspec.yaml
	echo "dependencies:" >> lib/protos/pubspec.yaml
	echo "  protobuf: ^1.0.1" >> lib/protos/pubspec.yaml
	echo "  grpc: ^2.2.0" >> lib/protos/pubspec.yaml

	ALL_PACKAGES=""
	ALL_MESSAGES=""
	ALL_COMMA_SEPARATED=""

	for PROTO in protos/*.proto ; do \
		FILE_NAME=$$(basename "$$PROTO" .proto) ; \
		protoc --proto_path=protos --dart_out=grpc:"lib/protos/lib/src/" "protos/$$FILE_NAME.proto" ; \
		echo "import 'src/$$FILE_NAME.pb.dart';" >> lib/protos/lib/protos.dart ; \
		echo "export 'src/$$FILE_NAME.pb.dart';" >> lib/protos/lib/protos.dart ; \
		if test -f "lib/protos/lib/src/$$FILE_NAME.pbgrpc.dart" ; then \
			echo "export 'src/$$FILE_NAME.pbgrpc.dart';" >> lib/protos/lib/protos.dart ; \
		fi ; \
		PACKAGE=$$(awk '{if (match($$0, /package (.*);/, arr) > 0) print arr[1] }' "protos/$$FILE_NAME.proto") ; \
		MESSAGES=$$(awk '{if (match($$0, /message (.*)\s*{/, arr) > 0) print arr[1] }' "protos/$$FILE_NAME.proto") ; \
		COMMA_SEPARATED=$$(awk '{if (match($$0, /message (.*)\s*{/, arr) > 0) print arr[1] ", " }' "protos/$$FILE_NAME.proto") ; \
		BUILDERS=$$(awk '{ if (match($$0, /message (.*)\s*{/, arr) > 0) { sub(" ", "", arr[1]); printf "() => new %s(), ", arr[1] } }' "protos/$$FILE_NAME.proto") ; \
		TYPES=$$(awk '{if (match($$0, /message (.*)\s*{/, arr) > 0) print "MessageType." arr[1] ", " }' "protos/$$FILE_NAME.proto") ; \
		SERVICES=$$(awk '{if (match($$0, /service (.*)\s*{/, arr) > 0) print arr[1] }' "protos/$$FILE_NAME.proto" | tr " " "\n") ; \
		RPCS="" ; \
		for SERVICE in $$SERVICES ; do \
			RPCS+="//:service $$SERVICE {" ; \
			RPCS+=$$(awk -v pattern="service $$SERVICE {" -v FS=$$'\b' -v RS=$$'\177' 'END { startOfService = match($$0, pattern); remainder = substr($$0, startOfService); endOfService = match(remainder, /\n\}/); serviceDefinition = substr(remainder, 0, endOfService + 1); patsplit(serviceDefinition, rpcs, /(rpc[^\n]*)/); for (i in rpcs) { printf "//:%s ", rpcs[i] } }' "protos/$$FILE_NAME.proto") ; \
			RPCS+="}" ; \
		done ; \
		ALL_PACKAGES+=$$(echo "processOnePackage(\"$$PACKAGE\", \"\"\"$$MESSAGES\"\"\", [$$TYPES], [$$BUILDERS], \"\"\"$$RPCS\"\"\");") ; \
		ALL_MESSAGES+=$$MESSAGES ; \
		ALL_COMMA_SEPARATED+=$$COMMA_SEPARATED ; \
	done ; \
	echo "void createServiceIndexEntries(void processOnePackage(String package, String messages, List<MessageType> types, List<protobuf.GeneratedMessage Function()> builders, String rpcs)) {" >> lib/protos/lib/protos.dart ; \
	echo $$ALL_PACKAGES >> lib/protos/lib/protos.dart ; \
	echo "}" >> lib/protos/lib/protos.dart ; \
	echo "enum MessageType {" >> lib/protos/lib/protos.dart ; \
	echo $$ALL_COMMA_SEPARATED >> lib/protos/lib/protos.dart ; \
	echo "}" >> lib/protos/lib/protos.dart

	dartfmt -w lib/protos/lib/protos.dart
	cd lib/protos ; pub get ; pub upgrade

target/rust_protos:
	rm -rf native/src/protos
	mkdir native/src/protos
	echo "// Auto-generated by makefile. Do not edit by hand." > native/src/protos/mod.rs
	echo "// @generated" >> native/src/protos.mod.rs

	ALL_COMMA_SEPARATED=""
	INDEX=0

	for PROTO in protos/*.proto ; do \
		FILE_NAME=$$(basename "$$PROTO" .proto) ; \
		protoc --proto_path=protos --rust_out native/src/protos/ "protos/$$FILE_NAME.proto" ; \
		echo "pub mod $$FILE_NAME;" >> native/src/protos/mod.rs ; \
		COMMA_SEPARATED=$$(awk -v i=$$INDEX '{if (match($$0, /message (.*)\s*{/, arr) > 0) print arr[1] "= " i ++ ", " }' "protos/$$FILE_NAME.proto") ; \
		ALL_COMMA_SEPARATED+=$$COMMA_SEPARATED ; \
		INDEX=$$((INDEX + $$(echo $$COMMA_SEPARATED | tr -cd ',' | wc -c))) ; \
	done ; \
	echo "" >> native/src/protos/mod.rs ; \
	echo "use num_derive::FromPrimitive;" >> native/src/protos/mod.rs ; \
	echo "" >> native/src/protos/mod.rs ; \
	echo "#[derive(FromPrimitive)]" >> native/src/protos/mod.rs ; \
	echo "pub enum MessageType {" >> native/src/protos/mod.rs ; \
	echo "    UnrecognizedMessage = -1," >> native/src/protos/mod.rs ; \
	echo "   " $$ALL_COMMA_SEPARATED | sed 's/, /,\n    /g' >> native/src/protos/mod.rs ; \
	echo "}" >> native/src/protos/mod.rs; \

# bindings: Generate the .h file for iOS
bindings: target/bindings.h

target/bindings.h: $(SOURCES)
	cd native ; \
	cbindgen --config cbindgen.toml --crate native | grep -v \#include | uniq > $@

# install: Place generated artifacts into correct android and ios build locations
.PHONY: install
install: target/install-android-debug target/install-ios-debug target/install-ios-bindings

target/install-android-debug:
	cp native/target/aarch64-linux-android/debug/libnative.so android/app/src/main/jniLibs/arm64-v8a/libnative.so
	cp native/target/armv7-linux-androideabi/debug/libnative.so android/app/src/main/jniLibs/armeabi-v7a/libnative.so
	cp native/target/i686-linux-android/debug/libnative.so android/app/src/main/jniLibs/x86/libnative.so

target/install-ios-debug:
	@if [ $$(uname) == "Darwin" ] ; then \
		cp native/target/universal/debug/libnative.a ios/libnative.a ; \
		else echo "Skipping iOS library installation on $$(uname)" ; \
	fi

target/install-ios-bindings:
	cp native/target/bindings.h ios/Classes/NativePlugin.h
